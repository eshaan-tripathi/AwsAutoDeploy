name: Deploy Service (Lambda / Glue)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Read service.json
        id: service
        run: |
          SERVICE_NAME=$(jq -r '.service_name' service.json)
          SERVICE_TYPE=$(jq -r '.service_type' service.json)
          AWS_REGION=$(jq -r '.aws_region' service.json)
          RUNTIME=$(jq -r '.runtime // empty' service.json)
          HANDLER=$(jq -r '.handler // empty' service.json)
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_TYPE=$SERVICE_TYPE" >> $GITHUB_ENV
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
          echo "RUNTIME=$RUNTIME" >> $GITHUB_ENV
          echo "HANDLER=$HANDLER" >> $GITHUB_ENV

      - name: Setup Dependencies & Run Tests
        run: |
          set -e
          cd src
          if [ -f "package.json" ]; then
            curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
            apt-get install -y nodejs zip
            npm install
            npm test
          elif [ -f "requirements.txt" ]; then
            apt-get update
            apt-get install -y python3 python3-pip zip
            python3 -m pip install --upgrade pip
            pip install -r requirements.txt
            pytest
          elif [ -f "pom.xml" ]; then
            apt-get update
            apt-get install -y maven zip
            mvn install
            mvn test
          else
            echo "No recognized project files. Skipping tests."
          fi

      - name: Zip Lambda code
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          set -e
          cd src
          zip -r ../${SERVICE_NAME}.zip . -x "*.git*" -x "node_modules/*" -x "tests/*"

      - name: Move ZIP to Terraform folder
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          mv ${SERVICE_NAME}.zip terraform/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate Terraform vars
        run: |
          if [ -z "${{ secrets.LAMBDA_ROLE_ARN }}" ] && [ "${SERVICE_TYPE}" = "lambda" ]; then
            echo "Error: LAMBDA_ROLE_ARN secret not set"
            exit 1
          fi
          echo "service_name = \"${SERVICE_NAME}\"" > terraform/terraform.tfvars
          echo "service_type = \"${SERVICE_TYPE}\"" >> terraform/terraform.tfvars
          echo "region = \"${AWS_REGION}\"" >> terraform/terraform.tfvars
          echo "lambda_role_arn = \"${{ secrets.LAMBDA_ROLE_ARN }}\"" >> terraform/terraform.tfvars
          if [ "${SERVICE_TYPE}" = "lambda" ]; then
            echo "lambda_runtime = \"${RUNTIME:-nodejs18.x}\"" >> terraform/terraform.tfvars
            echo "lambda_handler = \"${HANDLER:-index.handler}\"" >> terraform/terraform.tfvars
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Import existing resource (Lambda/Glue)
        run: |
          cd terraform
          if [ "${SERVICE_TYPE}" = "lambda" ]; then
            if aws lambda get-function --function-name $SERVICE_NAME >/dev/null 2>&1; then
              terraform import aws_lambda_function.this $SERVICE_NAME || true
              terraform import aws_lambda_alias.alias ${SERVICE_NAME}:prod || true
            fi
          elif [ "${SERVICE_TYPE}" = "glue" ]; then
            if aws glue get-job --job-name $SERVICE_NAME >/dev/null 2>&1; then
              terraform import aws_glue_job.this $SERVICE_NAME || true
            fi
          fi

      - name: Backup previous Lambda version
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          aws lambda get-alias --function-name $SERVICE_NAME --name prod > terraform/previous_version.json || echo "{}"

      - name: Backup previous Glue job
        if: ${{ env.SERVICE_TYPE == 'glue' }}
        run: |
          aws glue get-job --job-name $SERVICE_NAME > terraform/previous_glue.json || echo "{}"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Ensure Lambda alias exists (prod)
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          EXISTS=$(aws lambda get-alias --function-name $SERVICE_NAME --name prod --query 'Name' --output text 2>/dev/null || echo "")
          if [ -z "$EXISTS" ]; then
            NEW_VERSION=$(aws lambda publish-version --function-name $SERVICE_NAME --query 'Version' --output text)
            aws lambda create-alias --function-name $SERVICE_NAME --name prod --function-version $NEW_VERSION
          fi

      - name: Rollback on Failure (Lambda)
        if: failure() && env.SERVICE_TYPE == 'lambda'
        run: |
          PREV_VERSION=$(jq -r '.AliasDescription.FunctionVersion // empty' terraform/previous_version.json)
          if [ -n "$PREV_VERSION" ]; then
            aws lambda update-alias --function-name $SERVICE_NAME --name prod --function-version "$PREV_VERSION"
          fi

      - name: Rollback on Failure (Glue)
        if: failure() && env.SERVICE_TYPE == 'glue'
        run: |
          if [ -f terraform/previous_glue.json ]; then
            aws glue update-job --cli-input-json file://terraform/previous_glue.json
          fi
