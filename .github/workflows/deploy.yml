name: Deploy Demo Service

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Tests
        run: |
          npm install
          npm test

      - name: Zip Lambda code (excluding node_modules)
        run: |
          zip -r auto-deploy.zip . -x "node_modules/*"

      - name: Move ZIP to Terraform folder
        run: mv auto-deploy.zip terraform/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Import Lambda if it exists
        run: |
          cd terraform
          if aws lambda get-function --function-name demo-service-e; then
            terraform import aws_lambda_function.demo_service demo-service-e || true
          fi

      - name: Store Previous Lambda Version
        run: |
          set -e
          if aws lambda get-alias --function-name demo-service-e --name prod > previous_version.json; then
            echo "Alias found and version stored."
          else
            echo '{"AliasDescription":{"FunctionVersion":"1"}}' > previous_version.json
            echo "Alias not found. Using default version 1."
          fi
      - name: Debug Previous Version
        run: |
          echo "Contents of previous_version.json:"
          cat previous_version.json

      - name: Import Lambda Alias if it exists
        run: |
          cd terraform
          if aws lambda get-alias --function-name demo-service-e --name prod; then
            terraform import aws_lambda_alias.demo_service_alias demo-service-e/prod || true
          fi

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Create Alias If Missing
        run: |
          if ! aws lambda get-alias --function-name demo-service-e --name prod; then
            LATEST_VERSION=$(aws lambda list-versions-by-function --function-name demo-service-e --query 'Versions[-1].Version' --output text)
            aws lambda create-alias \
              --function-name demo-service-e \
              --name prod \
              --function-version "$LATEST_VERSION"
            echo "Alias 'prod' created pointing to version $LATEST_VERSION"
          fi

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Reading previous version..."
          cat previous_version.json
          PREV_VERSION=$(jq -r '.FunctionVersion' previous_version.json)
          if [ -z "$PREV_VERSION" ] || [ "$PREV_VERSION" == "null" ]; then
            echo "Previous version not found or invalid. Skipping rollback."
            exit 0
          fi
          echo "Rolling back to version $PREV_VERSION"
          aws lambda update-alias \
            --function-name demo-service-e \
            --name prod \
            --function-version "$PREV_VERSION"


