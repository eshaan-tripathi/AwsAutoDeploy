name: ðŸš€ Deploy AWS Service

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_LOG: ERROR
      TF_INPUT: false
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Load service config
        id: load-config
        run: |
          set -e
          SERVICE_NAME=$(jq -r '.service_name' service.json)
          SERVICE_TYPE=$(jq -r '.service_type' service.json)
          AWS_REGION=$(jq -r '.aws_region' service.json)

          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_TYPE=$SERVICE_TYPE" >> $GITHUB_ENV
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV

      - name: Install Node dependencies
        run: |
          set -e
          npm install

      - name: Run tests
        run: |
          set -e
          npm install --save-dev jest
          npm test

      - name: Package Lambda (if service is lambda)
        run: |
          set -e
          if [ "$SERVICE_TYPE" == "lambda" ]; then
            cd src
            zip -r ../deploy.zip . -x "node_modules/*" "*.test.js"
            cd ..
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.2

      - name: Terraform Init
        run: |
          set -e
          cd terraform
          terraform init -input=false

      - name: Terraform Plan
        run: |
          set -e
          cd terraform
          terraform plan -input=false -var="service_name=$SERVICE_NAME" -var="service_type=$SERVICE_TYPE"

      - name: Terraform Apply
        run: |
          set -e
          cd terraform
          terraform apply -auto-approve -input=false -var="service_name=$SERVICE_NAME" -var="service_type=$SERVICE_TYPE"

      - name: Verify Deployment
        run: |
          set -e
          echo "ðŸ”Ž Verifying deployment..."
          case "$SERVICE_TYPE" in
            lambda)
              aws lambda get-function --function-name "$SERVICE_NAME"
              ;;
            glue)
              aws glue get-job --job-name "$SERVICE_NAME"
              ;;
            *)
              echo "Unknown service type"
              exit 1
              ;;
          esac
          echo "âœ… Deployment verified successfully!"
