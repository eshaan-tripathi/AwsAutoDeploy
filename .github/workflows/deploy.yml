name: 🚀 Auto Deploy AWS Services

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1️⃣ Checkout Code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2️⃣ Read Service Config
      - name: Read Service Config
        id: read_service
        run: |
          SERVICE_NAME=$(jq -r '.service_name' service.json)
          SERVICE_TYPE=$(jq -r '.service_type' service.json)
          AWS_REGION=$(jq -r '.aws_region' service.json)
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_TYPE=$SERVICE_TYPE" >> $GITHUB_ENV
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
          echo "Detected service: $SERVICE_TYPE ($SERVICE_NAME in $AWS_REGION)"

      # 3️⃣ Syntax Check for Lambda and Glue
      - name: Syntax Check for Lambda and Glue
        run: |
          echo "🔍 Running syntax checks for $SERVICE_TYPE..."

          if [ "$SERVICE_TYPE" == "lambda" ]; then
            echo "🧪 Checking JavaScript syntax in src/..."
            find src -name "*.js" -exec node -c {} \; || (echo "❌ JavaScript syntax error!" && exit 1)

          elif [ "$SERVICE_TYPE" == "glue" ]; then
            echo "📥 Downloading Glue script from S3..."
            SCRIPT_PATH="/tmp/glue_script"
            aws s3 cp "s3://${SERVICE_NAME}/script.py" "$SCRIPT_PATH" || aws s3 cp "s3://${SERVICE_NAME}/script.scala" "$SCRIPT_PATH"

            EXT="${SCRIPT_PATH##*.}"

            if [ "$EXT" == "py" ]; then
              echo "🧪 Checking Python syntax..."
              python3 -m py_compile "$SCRIPT_PATH" || (echo "❌ Python syntax error!" && exit 1)
            elif [ "$EXT" == "scala" ]; then
              echo "🧪 Checking Scala syntax..."
              if ! command -v scalac &> /dev/null; then
                echo "⚠️ Scala compiler not found. Installing..."
                sudo apt-get update && sudo apt-get install -y scala
              fi
              scalac "$SCRIPT_PATH" || (echo "❌ Scala syntax error!" && exit 1)
            else
              echo "⚠️ Unknown script type: $EXT. Skipping syntax check."
            fi
          else
            echo "ℹ️ No syntax check needed for service type: $SERVICE_TYPE"
          fi

      # 4️⃣ Run Tests
      - name: Run Tests
        run: |
          npm ci
          echo "🧪 Running tests..."
          npm test || (echo "❌ Tests failed! Stopping pipeline." && exit 1)

      # 5️⃣ Package Source Code
      - name: Package Source Code
        if: ${{ env.SERVICE_TYPE == 'lambda' || env.SERVICE_TYPE == 'glue' }}
        run: |
          echo "📦 Packaging src/..."
          zip -r auto-deploy.zip src -x "src/node_modules/*" "*.log" "*.test.js"
          mv auto-deploy.zip terraform/

      # 6️⃣ Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 7️⃣ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # 8️⃣ Terraform Init
      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      # 9️⃣ Store Previous Lambda Version
      - name: Store Previous Lambda Version
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          if aws lambda get-alias --function-name "$SERVICE_NAME" --name prod > previous_version.json 2>/dev/null; then
            echo "Alias found and version stored."
          else
            echo '{"FunctionVersion":"1"}' > previous_version.json
            echo "No alias found, using default version 1."
          fi

      # 🔟 Check if Service Exists
      - name: Check if Service Exists
        id: check_service
        run: |
          echo "🔍 Checking if $SERVICE_TYPE service $SERVICE_NAME exists..."
          EXISTS="false"

          case "$SERVICE_TYPE" in
            lambda)
              if aws lambda get-function --function-name "$SERVICE_NAME" >/dev/null 2>&1; then
                EXISTS="true"
              fi
              ;;
            s3)
              if aws s3api head-bucket --bucket "$SERVICE_NAME" >/dev/null 2>&1; then
                EXISTS="true"
              fi
              ;;
            glue)
              if aws glue get-job --job-name "$SERVICE_NAME" >/dev/null 2>&1; then
                EXISTS="true"
              fi
              ;;
            ec2)
              EXISTS="unknown"
              ;;
          esac

          echo "SERVICE_EXISTS=$EXISTS" >> $GITHUB_ENV
          echo "Service exists: $EXISTS"

      # 1️⃣1️⃣ Terraform Plan
      - name: Terraform Plan
        if: ${{ env.SERVICE_EXISTS != 'true' }}
        run: |
          cd terraform
          terraform plan \
            -out=tfplan \
            -input=false \
            -var="service_name=${{ env.SERVICE_NAME }}" \
            -var="service_type=${{ env.SERVICE_TYPE }}" \
            -var="region=${{ env.AWS_REGION }}"

      # 1️⃣2️⃣ Terraform Apply
      - name: Terraform Apply
        if: ${{ env.SERVICE_EXISTS != 'true' }}
        run: |
          cd terraform
          terraform apply -parallelism=10 tfplan

      # 1️⃣3️⃣ Create Alias if Missing
      - name: Create Alias if Missing
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          if ! aws lambda get-alias --function-name "$SERVICE_NAME" --name prod >/dev/null 2>&1; then
            LATEST_VERSION=$(aws lambda list-versions-by-function --function-name "$SERVICE_NAME" --query 'Versions[-1].Version' --output text)
            aws lambda create-alias \
              --function-name "$SERVICE_NAME" \
              --name prod \
              --function-version "$LATEST_VERSION"
            echo "Alias 'prod' created pointing to version $LATEST_VERSION"
          fi

      # 1️⃣4️⃣ Rollback on Any Failure
      - name: Rollback on Any Failure
        if: always()
        run: |
          if [ "${{ job.status }}" == "failure" ] && [ "$SERVICE_TYPE" == "lambda" ]; then
            echo "⚠️ Deployment failed. Attempting rollback..."

            if ! aws lambda get-function --function-name "$SERVICE_NAME" >/dev/null 2>&1; then
              echo "Lambda function does not exist. Skipping rollback."
              exit 0
            fi

            PREV_VERSION=$(jq -r '.FunctionVersion' previous_version.json)
            if [ -z "$PREV_VERSION" ] || [ "$PREV_VERSION" == "null" ]; then
              echo "Previous version not found, skipping rollback."
              exit 0
            fi

            aws lambda update-alias \
              --function-name "$SERVICE_NAME" \
              --name prod \
              --function-version "$PREV_VERSION"
            echo "✅ Rolled back to previous version $PREV_VERSION"
          else
            echo "✅ No rollback needed."
          fi
