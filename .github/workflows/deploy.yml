name: üöÄ Deploy AWS Service

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_LOG: ERROR
      TF_INPUT: false
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      # ---------------------------------------
      # 1Ô∏è‚É£ Checkout repository
      # ---------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v3

      # ---------------------------------------
      # 2Ô∏è‚É£ Load service configuration
      # ---------------------------------------
      - name: Load service config
        id: load-config
        run: |
          set -e
          SERVICE_NAME=$(jq -r '.service_name' service.json)
          SERVICE_TYPE=$(jq -r '.service_type' service.json)
          AWS_REGION=$(jq -r '.aws_region' service.json)

          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_TYPE=$SERVICE_TYPE" >> $GITHUB_ENV
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV

          echo "‚úÖ Loaded config: $SERVICE_NAME ($SERVICE_TYPE) in $AWS_REGION"

      # ---------------------------------------
      # 3Ô∏è‚É£ Install dependencies
      # ---------------------------------------
      - name: Install dependencies
        run: |
          set -e
          npm install

      # ---------------------------------------
      # 4Ô∏è‚É£ Syntax Check (stop if syntax error)
      # ---------------------------------------
      - name: Check JavaScript Syntax
        run: |
          set -e
          echo "üîç Checking syntax for src/ and tests/ ..."
          if ! npm list eslint >/dev/null 2>&1; then
            npm install eslint --save-dev
          fi
          npx eslint src/**/*.js tests/**/*.js --max-warnings=0
          echo "‚úÖ No syntax errors found!"

      # ---------------------------------------
      # 5Ô∏è‚É£ Run Tests
      # ---------------------------------------
      - name: Run Tests
        run: |
          set -e
          npm test

      # ---------------------------------------
      # 6Ô∏è‚É£ Package code (exclude node_modules)
      # ---------------------------------------
      - name: Package source code
        run: |
          set -e
          cd src
          zip -r ../deploy.zip . -x "node_modules/*" "*.test.js"
          cd ..
          echo "‚úÖ Code packaged successfully"

      # ---------------------------------------
      # 7Ô∏è‚É£ Setup Terraform
      # ---------------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.2

      # ---------------------------------------
      # 8Ô∏è‚É£ Terraform Init
      # ---------------------------------------
      - name: Terraform Init
        run: |
          set -e
          cd terraform
          terraform init -input=false

      # ---------------------------------------
      # 9Ô∏è‚É£ Import Existing Resource
      # ---------------------------------------
      - name: Import Existing AWS Resource
        run: |
          set -e
          cd terraform
          echo "üîç Checking if $SERVICE_TYPE service $SERVICE_NAME exists..."
          case "$SERVICE_TYPE" in
            lambda)
              if aws lambda get-function --function-name "$SERVICE_NAME" >/dev/null 2>&1; then
                echo "Lambda exists ‚Üí importing..."
                terraform import aws_lambda_function.this "$SERVICE_NAME"
              else
                echo "Lambda does not exist ‚Üí will create new one"
              fi
              ;;
            s3)
              if aws s3api head-bucket --bucket "$SERVICE_NAME" >/dev/null 2>&1; then
                echo "S3 bucket exists ‚Üí importing..."
                terraform import aws_s3_bucket.this "$SERVICE_NAME"
              else
                echo "S3 bucket does not exist ‚Üí will create new one"
              fi
              ;;
            glue)
              if aws glue get-job --job-name "$SERVICE_NAME" >/dev/null 2>&1; then
                echo "Glue job exists ‚Üí importing..."
                terraform import aws_glue_job.this "$SERVICE_NAME"
              else
                echo "Glue job does not exist ‚Üí will create new one"
              fi
              ;;
            ec2)
              echo "Skipping EC2 import ‚Äî handled by Terraform configuration."
              ;;
            *)
              echo "‚ö†Ô∏è Unknown service type: $SERVICE_TYPE"
              exit 1
              ;;
          esac

      # ---------------------------------------
      # üîü Terraform Validate
      # ---------------------------------------
      - name: Terraform Validate
        run: |
          set -e
          cd terraform
          terraform validate

      # ---------------------------------------
      # 1Ô∏è‚É£1Ô∏è‚É£ Terraform Plan
      # ---------------------------------------
      - name: Terraform Plan
        run: |
          set -e
          cd terraform
          terraform plan -input=false -var="service_name=$SERVICE_NAME" -var="service_type=$SERVICE_TYPE"

      # ---------------------------------------
      # 1Ô∏è‚É£2Ô∏è‚É£ Terraform Apply with Rollback
      # ---------------------------------------
      - name: Terraform Apply
        run: |
          set -e
          cd terraform
          if ! terraform apply -auto-approve -input=false -var="service_name=$SERVICE_NAME" -var="service_type=$SERVICE_TYPE"; then
            echo "‚ùå Terraform apply failed! Rolling back..."
            terraform destroy -auto-approve -var="service_name=$SERVICE_NAME" -var="service_type=$SERVICE_TYPE"
            exit 1
          fi

      # ---------------------------------------
      # 1Ô∏è‚É£3Ô∏è‚É£ Post-Deployment Verification
      # ---------------------------------------
      - name: Verify Deployment
        run: |
          set -e
          echo "üîé Verifying deployment..."
          case "$SERVICE_TYPE" in
            lambda)
              aws lambda get-function --function-name "$SERVICE_NAME"
              ;;
            s3)
              aws s3api head-bucket --bucket "$SERVICE_NAME"
              ;;
            glue)
              aws glue get-job --job-name "$SERVICE_NAME"
              ;;
            ec2)
              echo "Verify EC2 instance with Terraform outputs."
              ;;
          esac
          echo "‚úÖ Deployment verified successfully!"
