name: üöÄ Auto Deploy AWS Services

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1Ô∏è‚É£ Checkout Code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Read Service Config
      - name: Read Service Config
        id: read_service
        run: |
          SERVICE_NAME=$(jq -r '.service_name' service.json)
          SERVICE_TYPE=$(jq -r '.service_type' service.json)
          AWS_REGION=$(jq -r '.aws_region' service.json)
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_TYPE=$SERVICE_TYPE" >> $GITHUB_ENV
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
          echo "Detected service: $SERVICE_TYPE ($SERVICE_NAME in $AWS_REGION)"

      # 3Ô∏è‚É£ Run Tests
      - name: Run Tests
        run: |
          npm ci
          echo "üß™ Running tests..."
          npm test || (echo "‚ùå Tests failed! Stopping pipeline." && exit 1)

      # 4Ô∏è‚É£ Package Source Code (Lambda/Glue only)
      - name: Package Source Code
        if: ${{ env.SERVICE_TYPE == 'lambda' || env.SERVICE_TYPE == 'glue' }}
        run: |
          echo "üì¶ Packaging src/..."
          zip -r auto-deploy.zip src -x "src/node_modules/*" "*.log" "*.test.js"
          mv auto-deploy.zip terraform/

      # 5Ô∏è‚É£ Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6Ô∏è‚É£ Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # 7Ô∏è‚É£ Terraform Init
      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      # 8Ô∏è‚É£ Store Previous Lambda Version (for rollback)
      - name: Store Previous Lambda Version
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          if aws lambda get-alias --function-name "$SERVICE_NAME" --name prod > previous_version.json 2>/dev/null; then
            echo "Alias found and version stored."
          else
            echo '{"FunctionVersion":"1"}' > previous_version.json
            echo "No alias found, using default version 1."
          fi

      # 9Ô∏è‚É£ Terraform Apply (Create/Update Infra)
      # üîç Terraform Plan
      - name: Terraform Plan
        run: |
          cd terraform
          echo "üìã Running Terraform plan for $SERVICE_TYPE: $SERVICE_NAME"
          terraform plan -out=tfplan -input=false
      
      # üöÄ Terraform Apply using Plan
      - name: Terraform Apply (Create/Update Infra)
        run: |
          cd terraform
          export TF_LOG=INFO
          echo "üöÄ Applying Terraform plan for $SERVICE_TYPE: $SERVICE_NAME"
          terraform apply -parallelism=10 tfplan


      # üîü Create Alias if Missing (Lambda only)
      - name: Create Alias if Missing
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          if ! aws lambda get-alias --function-name "$SERVICE_NAME" --name prod >/dev/null 2>&1; then
            LATEST_VERSION=$(aws lambda list-versions-by-function --function-name "$SERVICE_NAME" --query 'Versions[-1].Version' --output text)
            aws lambda create-alias \
              --function-name "$SERVICE_NAME" \
              --name prod \
              --function-version "$LATEST_VERSION"
            echo "Alias 'prod' created pointing to version $LATEST_VERSION"
          fi

      # 1Ô∏è‚É£1Ô∏è‚É£ Rollback on Failure
      - name: Rollback on Failure
        if: failure() && env.SERVICE_TYPE == 'lambda'
        run: |
          echo "‚ö†Ô∏è Deployment failed. Attempting rollback..."
          PREV_VERSION=$(jq -r '.FunctionVersion' previous_version.json)
          if [ -z "$PREV_VERSION" ] || [ "$PREV_VERSION" == "null" ]; then
            echo "Previous version not found, skipping rollback."
            exit 0
          fi
          aws lambda update-alias \
            --function-name "$SERVICE_NAME" \
            --name prod \
            --function-version "$PREV_VERSION"
          echo "‚úÖ Rolled back to previous version $PREV_VERSION"
