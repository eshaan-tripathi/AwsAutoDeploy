name: CI/CD Pipeline with Rollback

on:
  push:
    branches:
      - main

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Parse service.json
      - name: Read service.json
        id: service
        run: |
          SERVICE_NAME=$(jq -r '.service_name' service.json)
          SERVICE_TYPE=$(jq -r '.service_type' service.json)
          AWS_REGION=$(jq -r '.aws_region' service.json)
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_TYPE=$SERVICE_TYPE" >> $GITHUB_ENV
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV

      # 3. Detect language & install dependencies
      - name: Setup dependencies
        run: |
          set -e
          cd src
          if [ -f "requirements.txt" ]; then
            echo "Python project detected"
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            echo "TEST_CMD=pytest" >> $GITHUB_ENV
            echo "RUNTIME=python3.11" >> $GITHUB_ENV
            echo "HANDLER=handler.lambda_handler" >> $GITHUB_ENV
          elif [ -f "package.json" ]; then
            echo "Node.js project detected"
            curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
            apt-get install -y nodejs
            npm install
            echo "TEST_CMD='npm test'" >> $GITHUB_ENV
            echo "RUNTIME=nodejs20.x" >> $GITHUB_ENV
            echo "HANDLER=index.handler" >> $GITHUB_ENV
          elif [ -f "pom.xml" ]; then
            echo "Java Maven project detected"
            mvn install
            echo "TEST_CMD='mvn test'" >> $GITHUB_ENV
            echo "RUNTIME=java17" >> $GITHUB_ENV
            echo "HANDLER=com.example.LambdaHandler::handleRequest" >> $GITHUB_ENV
          else
            echo "Unknown language. Skipping tests."
            echo "TEST_CMD=" >> $GITHUB_ENV

      # 4. Run tests
      - name: Run tests
        run: |
          set -e
          cd src
          if [ -n "$TEST_CMD" ]; then
            echo "Running tests..."
            eval $TEST_CMD
          else
            echo "No tests detected, skipping..."
          fi

      # 5. Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 6. Deploy Lambda with rollback
      - name: Deploy Lambda with Rollback
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          set -e
          cd src
          zip -r lambda_package.zip . -x "*.git*" -x "tests/*"

          # Get current alias version for rollback
          CURRENT_VERSION=$(aws lambda get-alias --function-name $SERVICE_NAME --name prod --query 'FunctionVersion' --output text 2>/dev/null || echo "")

          # Check if function exists
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $SERVICE_NAME --query 'Configuration.FunctionName' --output text 2>/dev/null || echo "")

          if [ "$FUNCTION_EXISTS" == "$SERVICE_NAME" ]; then
            echo "Updating existing Lambda function..."
            aws lambda update-function-code --function-name $SERVICE_NAME --zip-file fileb://lambda_package.zip
          else
            echo "Creating new Lambda function..."
            aws lambda create-function \
              --function-name $SERVICE_NAME \
              --runtime $RUNTIME \
              --role arn:aws:iam::123456789012:role/your-lambda-role \
              --handler $HANDLER \
              --zip-file fileb://lambda_package.zip
          fi

          # Publish new version
          NEW_VERSION=$(aws lambda publish-version --function-name $SERVICE_NAME --description "Auto-deployed via GitHub Actions" --query 'Version' --output text)

          # Update alias to new version
          aws lambda update-alias --function-name $SERVICE_NAME --name prod --function-version $NEW_VERSION

          # Test Lambda after deployment
          TEST_OUTPUT=$(aws lambda invoke --function-name $SERVICE_NAME --qualifier prod /dev/stdout || echo "error")
          if [[ "$TEST_OUTPUT" == *"error"* ]]; then
            echo "Deployment test failed! Rolling back..."
            if [ -n "$CURRENT_VERSION" ]; then
              aws lambda update-alias --function-name $SERVICE_NAME --name prod --function-version $CURRENT_VERSION
              echo "Rollback complete to version $CURRENT_VERSION"
            fi
            exit 1
          fi

      # 7. Deploy/Update Glue job (if service_type is glue)
      - name: Deploy/Update Glue Job
        if: ${{ env.SERVICE_TYPE == 'glue' }}
        run: |
          set -e
          JOB_EXISTS=$(aws glue get-job --job-name $SERVICE_NAME --query 'Job.Name' --output text 2>/dev/null || echo "")
          if [ "$JOB_EXISTS" == "$SERVICE_NAME" ]; then
            echo "Updating existing Glue job..."
            aws glue update-job --job-name $SERVICE_NAME --job-update file://glue_job_update.json
          else
            echo "Creating new Glue job..."
            aws glue create-job --cli-input-json file://glue_job_create.json
