name: üöÄ Auto Deploy AWS Services

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # ---------------------------------------
      # 1Ô∏è‚É£ Checkout Code
      # ---------------------------------------
      - name: Checkout Repository
        uses: actions/checkout@v3

      # ---------------------------------------
      # 2Ô∏è‚É£ Read service.json configuration
      # ---------------------------------------
      - name: Read Service Config
        id: read_service
        run: |
          SERVICE_NAME=$(jq -r '.service_name' service.json)
          SERVICE_TYPE=$(jq -r '.service_type' service.json)
          AWS_REGION=$(jq -r '.aws_region' service.json)
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SERVICE_TYPE=$SERVICE_TYPE" >> $GITHUB_ENV
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
          echo "Detected service: $SERVICE_TYPE ($SERVICE_NAME in $AWS_REGION)"

      # ---------------------------------------
      # 3Ô∏è‚É£ Run Unit Tests
      # ---------------------------------------
      - name: Run Tests
        run: |
          npm install
          echo "üß™ Running tests from /tests folder..."
          npm test || (echo "‚ùå Tests failed! Stopping pipeline." && exit 1)

      # ---------------------------------------
      # 4Ô∏è‚É£ Zip Code (only for code-based services)
      # ---------------------------------------
      - name: Package Source Code
        if: ${{ env.SERVICE_TYPE == 'lambda' || env.SERVICE_TYPE == 'glue' }}
        run: |
          echo "üì¶ Packaging src/ excluding node_modules..."
          cd src
          zip -r ../auto-deploy.zip . -x "node_modules/*"
          cd ..
          mv auto-deploy.zip terraform/
          echo "‚úÖ Code packaged and moved to terraform folder"


      # ---------------------------------------
      # 5Ô∏è‚É£ Configure AWS Credentials
      # ---------------------------------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ---------------------------------------
      # 6Ô∏è‚É£ Setup Terraform
      # ---------------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -input=false

      # ---------------------------------------
      # 7Ô∏è‚É£ Check if service exists and import if needed
      # ---------------------------------------
      - name: Import Existing AWS Resource
        run: |
          cd terraform
          echo "üîç Checking if $SERVICE_TYPE service $SERVICE_NAME exists..."

          case "$SERVICE_TYPE" in
            lambda)
              if aws lambda get-function --function-name "$SERVICE_NAME" >/dev/null 2>&1; then
                echo "Lambda exists ‚Üí importing..."
                terraform import aws_lambda_function.service "$SERVICE_NAME" || true
              else
                echo "Lambda does not exist ‚Üí will create new one"
              fi
              ;;
            s3)
              if aws s3api head-bucket --bucket "$SERVICE_NAME" >/dev/null 2>&1; then
                echo "S3 bucket exists ‚Üí importing..."
                terraform import aws_s3_bucket.service "$SERVICE_NAME" || true
              else
                echo "S3 bucket does not exist ‚Üí will create new one"
              fi
              ;;
            glue)
              if aws glue get-job --job-name "$SERVICE_NAME" >/dev/null 2>&1; then
                echo "Glue job exists ‚Üí importing..."
                terraform import aws_glue_job.service "$SERVICE_NAME" || true
              else
                echo "Glue job does not exist ‚Üí will create new one"
              fi
              ;;
            ec2)
              echo "Skipping import for EC2 (handled via Terraform tags or IDs)."
              ;;
            *)
              echo "‚ö†Ô∏è Unknown service type: $SERVICE_TYPE"
              ;;
          esac

      # ---------------------------------------
      # 8Ô∏è‚É£ Save Previous Version (for rollback)
      # ---------------------------------------
      - name: Store Previous Lambda Version
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          set -e
          if aws lambda get-alias --function-name "$SERVICE_NAME" --name prod > previous_version.json; then
            echo "Alias found and version stored."
          else
            echo '{"FunctionVersion":"1"}' > previous_version.json
            echo "No alias found, using default version 1."
          fi
          cat previous_version.json

      # ---------------------------------------
      # 9Ô∏è‚É£ Terraform Apply
      # ---------------------------------------
      - name: Terraform Apply (Create/Update Infra)
        run: |
          cd terraform
          echo "üöÄ Applying Terraform for $SERVICE_TYPE: $SERVICE_NAME"
          terraform apply -auto-approve

      # ---------------------------------------
      # üîü Create Alias (Lambda only)
      # ---------------------------------------
      - name: Create Alias if Missing
        if: ${{ env.SERVICE_TYPE == 'lambda' }}
        run: |
          if ! aws lambda get-alias --function-name "$SERVICE_NAME" --name prod >/dev/null 2>&1; then
            LATEST_VERSION=$(aws lambda list-versions-by-function --function-name "$SERVICE_NAME" --query 'Versions[-1].Version' --output text)
            aws lambda create-alias \
              --function-name "$SERVICE_NAME" \
              --name prod \
              --function-version "$LATEST_VERSION"
            echo "Alias 'prod' created pointing to version $LATEST_VERSION"
          fi

      # ---------------------------------------
      # 1Ô∏è‚É£1Ô∏è‚É£ Rollback on Failure
      # ---------------------------------------
      - name: Rollback on Failure
        if: failure() && env.SERVICE_TYPE == 'lambda'
        run: |
          echo "‚ö†Ô∏è Deployment failed. Attempting rollback..."
          cat previous_version.json
          PREV_VERSION=$(jq -r '.FunctionVersion' previous_version.json)
          if [ -z "$PREV_VERSION" ] || [ "$PREV_VERSION" == "null" ]; then
            echo "Previous version not found, skipping rollback."
            exit 0
          fi
          aws lambda update-alias \
            --function-name "$SERVICE_NAME" \
            --name prod \
            --function-version "$PREV_VERSION"
          echo "‚úÖ Rolled back to previous version $PREV_VERSION"
